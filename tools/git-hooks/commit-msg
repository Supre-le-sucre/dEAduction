#!/bin/bash
#####################################
# Simple convenional commit checker #
#####################################
# Florian Dupeyron
# June 2020

msg=$(cat $1) # Hook paremeter is a path to a temoprary file containing the
              # Commit msg

##################################
# Constants
##################################
regex='([a-zA-Z]+)(\(([^()]+)\))?[ ]*[:][ ]*(.*)'
regex_msg='^[a-z].*'

regex_merge='(([a-zA-Z0-9]+\/)+[a-zA-Z0-9]+) -> (([a-zA-Z0-9]+\/)+[a-zA-Z0-9]+)'
# group 1 : task type
# group 2 : scope (with parentheses)
# group 3 : scope (without parentheses)
# group 4 : message

# Tasks types regex
tasks="^(chores|docs|feat|fix|perf|refactor|style|snippet[s]?|test|tools|merge)$"

show_help() {
    echo "Please follow the following format :

    task_type(optional scope): message

    task_type can be one of :
		- chores	: changes that do not affect the source-code nor the tools
	(e.g. reorganize tree, rename files);
        - docs		: documentation only changes ;
        - feat		: a new feature ;
        - fix		: a bug fix ;
        - perf		: a code change that improves performance ;
        - refactor	: a code change that neither fixes a bug nor adds a feature ;
        - snippets  : add or modify code in snippets/ ;
        - style		: changes that do not affect the meaning of the code
        (white-space, formatting, missing semi-colons) ;
        - test		: adding missing tests or correcting existing tests ;
        - tools		: tools only (e.g. git hooks) changes.

        message must start with a low case verb in the imperative form."
}

ESC_BOLD=$(tput bold)
ESC_RED=$(tput setaf 1)
ESC_GREEN=$(tput setaf 2)
ESC_RESET=$(tput sgr0)

show_bad() {
    echo ""
    echo -e $ESC_BOLD$ESC_RED$1$ESC_RESET
    echo ""
}

show_good() {
    echo ""
    echo -e $ESC_BOLD$ESC_GREEN$1$ESC_RESET
    echo ""
}

##################################
# Checking script
##################################
[[ -z $msg ]] && show_bad "Please give a message to check" && exit 1

if [[ $msg =~ ${regex} ]] ; then
    # Get infos
    task_type=${BASH_REMATCH[1]}
    scope=${BASH_REMATCH[3]}
    msg=${BASH_REMATCH[4]}

    echo "Analysis of commit message :
    > Type of task : ${task_type}
    > Scope        : ${scope}
    > Message      : ${msg}"

    # Check task type
    if [[ ! ${task_type} =~ ${tasks} ]] ; then
        show_bad "Uknown task type : $task_type"
        show_help
        exit 1
    fi

    # Check for merge
    if [[ ${task_type} == "merge" ]] ; then
        if [[ ! ${msg} =~ ${regex_merge} ]] ; then
            remote_list=$(git remote | sed 's/^/    > /g')"\n    > local"

            show_bad "Invalid merge message. Merge message must be :\n    merge: remote1/branch -> remote2/branch
                     \n\nRemote can be one of :\n\n${remote_list}"
            exit 1
        fi
    # Check message
    else
        if [[ ! ${msg} =~ ${regex_msg} ]] ; then
            show_bad "Message must start with a low case letter"
            show_help
            exit 1
        fi
    fi

    # Confirmation
    show_good "Message follows conventional commit standards !"
    exit 0
else
    show_bad "Message doesn't respect the conventional commit format."

    show_help
    exit 1
fi
